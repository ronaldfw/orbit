cmake_minimum_required(VERSION 3.15)

project(unwindstack CXX C ASM)

# include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
# conan_basic_setup(TARGETS)

add_library(unwindstack STATIC)

set(ANDROID_CORE_ROOT "${CMAKE_CURRENT_LIST_DIR}/android-core")
set(UNWINDSTACK_ROOT "${ANDROID_CORE_ROOT}/libunwindstack")
set(ANDROID_BASE_ROOT "${ANDROID_CORE_ROOT}/base")

target_include_directories(
  unwindstack
  PUBLIC ${UNWINDSTACK_ROOT}/include
         ${ANDROID_BASE_ROOT}/include
         # ${ANDROID_CORE_ROOT}/include
         ${ANDROID_CORE_ROOT}/liblog/include
         ${ANDROID_CORE_ROOT}/libprocinfo/include)

target_include_directories(unwindstack PRIVATE ${UNWINDSTACK_ROOT})

# Override file.cpp to avoid depending on Android's logging. Override
# strings.h/.cpp to not use <string_view>, which requires C++17 that gamelets'
# GCC does not support. Override libunwindstack's files that gamelet's GCC fails
# to compile. TODO: Until we switch to clang, make sure to update the overrides
# of libunwindstack's files if the originals are updated.
target_sources(
  unwindstack
  PRIVATE # ${ANDROID_BASE_ROOT}/file.cpp
          overrides/file.cpp
          # ${ANDROID_BASE_ROOT}/liblog_symbols.cpp
          # ${ANDROID_BASE_ROOT}/logging.cpp
          ${ANDROID_BASE_ROOT}/stringprintf.cpp
          ${ANDROID_BASE_ROOT}/strings.cpp
          ${ANDROID_BASE_ROOT}/threads.cpp
          # ${ANDROID_CORE_ROOT}/liblog/properties.cpp
          ${UNWINDSTACK_ROOT}/ArmExidx.cpp
          ${UNWINDSTACK_ROOT}/Coff.cpp
          ${UNWINDSTACK_ROOT}/DwarfCfa.cpp
          ${UNWINDSTACK_ROOT}/DwarfEhFrameWithHdr.cpp
          ${UNWINDSTACK_ROOT}/DwarfMemory.cpp
          ${UNWINDSTACK_ROOT}/DwarfOp.cpp
          ${UNWINDSTACK_ROOT}/DwarfSection.cpp
          ${UNWINDSTACK_ROOT}/Elf.cpp
          ${UNWINDSTACK_ROOT}/ElfInterface.cpp
          ${UNWINDSTACK_ROOT}/ElfInterfaceArm.cpp
          ${UNWINDSTACK_ROOT}/Global.cpp
          ${UNWINDSTACK_ROOT}/JitDebug.cpp
          ${UNWINDSTACK_ROOT}/LocalUnwinder.cpp
          ${UNWINDSTACK_ROOT}/Log.cpp
          ${UNWINDSTACK_ROOT}/MapInfo.cpp
          ${UNWINDSTACK_ROOT}/Maps.cpp
          ${UNWINDSTACK_ROOT}/Memory.cpp
          ${UNWINDSTACK_ROOT}/Regs.cpp
          ${UNWINDSTACK_ROOT}/RegsArm.cpp
          ${UNWINDSTACK_ROOT}/RegsArm64.cpp
          ${UNWINDSTACK_ROOT}/RegsMips.cpp
          ${UNWINDSTACK_ROOT}/RegsMips64.cpp
          ${UNWINDSTACK_ROOT}/RegsX86.cpp
          ${UNWINDSTACK_ROOT}/RegsX86_64.cpp
          ${UNWINDSTACK_ROOT}/Symbols.cpp
          ${UNWINDSTACK_ROOT}/Unwinder.cpp
          ${UNWINDSTACK_ROOT}/tests/LogFake.cpp
)

add_executable(UnwindstackTests)

target_sources(UnwindstackTests PRIVATE
  ${UNWINDSTACK_ROOT}/tests/ElfTestUtils.h
  ${UNWINDSTACK_ROOT}/tests/ElfTestUtils.cpp
  ${UNWINDSTACK_ROOT}/tests/MemoryFake.cpp
  ${UNWINDSTACK_ROOT}/tests/CoffTest.cpp)

target_include_directories(
  UnwindstackTests
  PUBLIC ${UNWINDSTACK_ROOT}/include
         ${ANDROID_BASE_ROOT}/include
         # ${ANDROID_CORE_ROOT}/include
         ${ANDROID_CORE_ROOT}/liblog/include
         ${ANDROID_CORE_ROOT}/libprocinfo/include)

target_link_libraries(
  UnwindstackTests
  PRIVATE
  unwindstack
  GTest::Main)

add_custom_command(TARGET UnwindstackTests POST_BUILD
  COMMAND ${CMAKE_COMMAND} -E copy_directory ${UNWINDSTACK_ROOT}/tests/files
  $<TARGET_FILE_DIR:UnwindstackTests>/files)

register_test(UnwindstackTests)

if(${CMAKE_SYSTEM_PROCESSOR} MATCHES x86_64)
  target_sources(unwindstack PRIVATE ${UNWINDSTACK_ROOT}/AsmGetRegsX86_64.S)
elseif(${CMAKE_SYSTEM_PROCESSOR} MATCHES x86)
  target_sources(unwindstack PRIVATE ${UNWINDSTACK_ROOT}/AsmGetRegsX86.S)
endif()

target_link_libraries(unwindstack PUBLIC CONAN_PKG::lzma_sdk CONAN_PKG::capstone)

target_compile_features(unwindstack PUBLIC cxx_std_17)
